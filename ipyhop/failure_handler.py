#!/usr/bin/env python
"""
File Description:  File used for definition of plan failure handling functions.
This is an old file. Kept here only for future reference. Do not use this.
"""

# ******************************************    Libraries to be imported    ****************************************** #
from networkx import DiGraph
from typing import List, Tuple, Union


# ****************************************        Function Declaration        **************************************** #
def post_failure_tasks(graph: DiGraph, fail_node: Union[int, Tuple]) -> List:
    """
    *   post_failure_tasks(graph, fail_node) tells IPyHOP to compute the modified task list given that
        an unexpected failure occurred during actual execution of fail_node from the original planned graph.

    :param graph: A planning graph generated by IPyHOP.
    :param fail_node: The node where a failure occurred during the plan execution.
        (should be an action command under most circumstances)
    :return: A list containing modified task list. Planning should be done on this during re-planning after failure.
    """
    task_id_list = []

    if type(fail_node) == tuple:
        for node in graph.nodes:
            if graph.nodes[node]['info'] == fail_node:
                fail_node = node
                break
        if type(fail_node) != int:
            raise ValueError('Could not find the fail_node in the graph.')

    # Parent of failure node.
    parent_node_list = list(graph.predecessors(fail_node))
    parent_node = parent_node_list[0] if len(parent_node_list) else None

    # Grand parent of the failure node.
    g_parent_node_list = list(graph.predecessors(parent_node))
    g_parent_node = g_parent_node_list[0] if len(g_parent_node_list) else None

    if g_parent_node is None:     # Equivalent to if parent_node == 'root'
        task_list = []
        for task_id in task_id_list:
            task_list.append(graph.nodes[task_id]['info'])
        return task_list
    else:
        succ_list = list(graph.successors(g_parent_node))
        p_node_ind = succ_list.index(parent_node)
        # If first node in g_parent successors caused failure, add the g_parent to task list. Unless g_parent is root.
        if not p_node_ind and graph.nodes[g_parent_node]['type'] != 'D':
            task_id_list.append(g_parent_node)
        else:               # Else add the g_parent successors from the parent node.
            task_id_list.extend(succ_list[p_node_ind:])

    while True:
        parent_node = g_parent_node
        g_parent_node_list = list(graph.predecessors(parent_node))
        g_parent_node = g_parent_node_list[0] if len(g_parent_node_list) else None

        if g_parent_node is None:  # Equivalent to if parent_node == 'root'
            task_list = []
            for task_id in task_id_list:
                task_list.append(graph.nodes[task_id]['info'])
            return task_list
        else:
            succ_list = list(graph.successors(g_parent_node))
            succ_list = succ_list[succ_list.index(parent_node) + 1:]
            task_id_list.extend(succ_list)


# ******************************************    Demo / Test Routine         ****************************************** #
if __name__ == '__main__':
    raise NotImplementedError("Test run / Demo routine for Failure Handler isn't implemented.")

"""
Author(s): Yash Bansod
Repository: https://github.com/YashBansod/IPyHOP
"""