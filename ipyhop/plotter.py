#!/usr/bin/env python
"""
File Description: File used for definition of plan plotting functions.
"""

# ******************************************    Libraries to be imported    ****************************************** #
from networkx import draw_planar, dfs_preorder_nodes
from matplotlib import pyplot as plt
from networkx import DiGraph


# ****************************************        Function Declaration        **************************************** #
def planar_plot(graph: DiGraph, root_node: int = 0):
    """
    *   planar_plot(graph, root_node=0) tells IPyHOP to create a planar plot of the graph.
        This can be used to visualize the solution planning graph.
        Solution planning graph can be accessed using planner.sol_tree.

    :param graph: A planning graph generated by IPyHOP.
    :param root_node: The node to use as a root node. If any node other than 0 (0 is always the root)
        is used as root_node then only the subgraph from that node is plotted.
    """
    node_list = list(dfs_preorder_nodes(graph, root_node))
    sub_graph = graph.subgraph(node_list)
    n_col = []
    n_sz = []
    n_lbls = {}
    label_stx = "<%d>: [%d]: %s"
    for i, node in enumerate(node_list):
        n_lbls[node] = label_stx % (i, node, repr(graph.nodes[node]['info']))

    for node in sub_graph:
        if graph.nodes[node]['type'] == 'D':
            n_col.append('red')
            n_sz.append(200)
        elif graph.nodes[node]['type'] == 'T':
            n_col.append('blue')
            n_sz.append(100)
        elif graph.nodes[node]['type'] == 'G':
            n_col.append('orange')
            n_sz.append(100)
        elif graph.nodes[node]['type'] == 'M':
            n_col.append('chocolate')
            n_sz.append(100)
        elif graph.nodes[node]['type'] == 'A':
            n_col.append('green')
            n_sz.append(50)
        elif graph.nodes[node]['type'] == 'VG' or graph.nodes[node]['type'] == 'VM':
            n_col.append('gray')
            n_sz.append(30)
        else:
            raise ValueError("Invalid Node Encountered.")
    plt.figure()
    draw_planar(sub_graph, node_color=n_col, with_labels=True, node_size=n_sz, font_size=7, labels=n_lbls)
    plt.show(block=True)


# ******************************************    Demo / Test Routine         ****************************************** #
if __name__ == '__main__':
    raise NotImplementedError("Test run / Demo routine for plotter isn't implemented.")

"""
Author(s): Yash Bansod
Repository: https://github.com/YashBansod/IPyHOP
"""
